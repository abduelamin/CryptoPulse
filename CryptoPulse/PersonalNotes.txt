1:

A regular expression, often abbreviated as "regex" or "regexp," is a sequence of characters that defines a search pattern. It is used for matching strings within other strings, searching and replacing substrings, and validating input based on a specified pattern.

In JavaScript, regular expressions are represented by the RegExp object. You can create a regular expression using the RegExp constructor or by using a literal notation between slashes (/).

Here are  ways to create a regex pattern that matches strings containing only letters:


const onlyLettersPattern = /^[A-Za-z]+$/;
 the pattern ^[A-Za-z]+$ means:

^: Asserts the start of the string.
[A-Za-z]: Matches any uppercase or lowercase letter.
+: Ensures that there is at least one or more letters.
$: Asserts the end of the string.


regEx have their own methods and one of which is .test() - this method takes the string as an arugment as tests it against the regexp. if the string follows the regexp pattern then it returns true, otherwise its false.

e.g. 

onlyLettersPattern.test(mystring)

in summary: 
           Regexp are objects we create via /^[]+$/  and within the [] we specify the pattern we're looking for i.e. only letters either uppercase or small case. 

           Regexp have methods such as test() which we can then pass the string as () arugment and it will see if follows the regexp stated?
------------------------------------------------------

2: 

Sometimes you may need to use an if statemenet before calling the async function within useEffect. - why?
Because this prevents fetching occuring when the dependency is a falsy. for example in my app.jsx iM FETCHING 
the api call whenever a user searches a coin, however on intial page load the search bar is empty therefore
to prevent the useffect from invoking the fetch function I placed an if statement to tell it to only invoke
the function when a turthy is placed.

3:

Similarly if you are rendering a component based on a fetch call you must use conditional rendering to ensure that the component only renders once the fetchcall has been completed - for example the SearchedCoin component of mine needs the coinSearch state but on page load this coinSearch state is an empty string so rendering it based on null/falsy value will lead to error (as some methods i.e. toUpperCase in the component can't be carried out). Therefore I made it whereby the component only renders once the coinSearch state has been changed to a truthy.